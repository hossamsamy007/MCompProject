package uk.ac.ncl.burton.twy.ZPK.components.prover;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import uk.ac.ncl.burton.twy.maths.CyclicGroup;

public abstract class PKComponentProverBasic implements PKComponentProver {

	private boolean hasGeneratedTValue = false;
	private boolean hasGeneratedSValue = false;
	
	protected CyclicGroup G = null;
	
	private BigInteger tValue;
	private BigInteger sValue;
	
	PKComponentProverBasic( CyclicGroup G ){
		this.G = G;
	}
	
	@Override
	public final BigInteger getCommitment() {
		
		if( !hasGeneratedTValue ){ // Prevent T value from being generated twice
			generateTValue();
			hasGeneratedTValue = true;
		}
		
		return tValue;
	}
	public abstract BigInteger generateTValue();

	
	@Override
	public final BigInteger getResponse(BigInteger c) {
		
		if( !hasGeneratedSValue ){ // Prevent S value from being generated twice
			sValue = generateSValue( c );
			hasGeneratedSValue = true;
		}
		
		return sValue;
	}
	public abstract BigInteger generateSValue( BigInteger c );


	
	/* USED BY SUB CLASSES TO SET VALUES FOR t AND s */
	protected final void setTValue( BigInteger tValue){
		this.tValue = tValue;
	}
	protected final void setSValue( BigInteger sValue){
		this.sValue = sValue;
	}
	
	
	// == PASSING VARIABLES ==
	protected List<BigInteger> passingVariables = new ArrayList<BigInteger>();
	
	@Override
	public final List<BigInteger> getPassingVariables(){
		passingVariables.clear();
		generatePassingVariables();
		return passingVariables;
	}
	
	protected abstract void generatePassingVariables();
}
