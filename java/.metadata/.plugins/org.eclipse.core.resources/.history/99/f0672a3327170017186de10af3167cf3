package uk.ac.ncl.burton.twy.ZPK2;

import java.math.BigInteger;
import java.util.List;

import uk.ac.ncl.burton.twy.maths.CyclicGroup;
import uk.ac.ncl.burton.twy.utils.BigIntegerUtils;

public class PoKVerifier {

	private CyclicGroup G;
	
	private BigInteger challenge;
	
	public PoKVerifier( CyclicGroup G ){
		this.G = G;
	}
	
	private void generateRandomValues(){
		challenge = BigIntegerUtils.randomBetween( BigInteger.ONE, G.getQ() );
	}
	
	public BigInteger getChallenge(){
		return challenge;
	}

	public boolean Verify( List<BigInteger> bases, List<BigInteger> responses, BigInteger commitment, BigInteger value ){
		//u^s1 g^s2 == t(x)^c
		
		if( bases.size() != responses.size() ) throw new IllegalArgumentException("The number of bases must match the number of responses");
		
		BigInteger leftSide = BigInteger.ONE;
		for(int i = 0 ; i < bases.size(); i++ ){
			leftSide = leftSide.multiply( bases.get(i).modPow(responses.get(i), G.getQ())).mod(G.getQ());
		}
		
		BigInteger rightSide = commitment.multiply( value.modPow(challenge, G.getQ())).mod(G.getQ());
		
		return leftSide.equals(rightSide);
		
		
	}
	
	
	
}
