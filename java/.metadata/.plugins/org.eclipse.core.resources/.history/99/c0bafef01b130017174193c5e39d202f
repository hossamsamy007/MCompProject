package uk.ac.ncl.burton.twy.PSPAKEDH;

import java.math.BigInteger;

import uk.ac.ncl.burton.twy.crypto.Crypto;
import uk.ac.ncl.burton.twy.maths.CyclicGroup;
import uk.ac.ncl.burton.twy.utils.BigIntegerUtils;

public class PDHReceiver extends PDHParty {

	private CyclicGroup G;
	private BigInteger password;
	private BigInteger sender_id;
	private BigInteger receiver_id;
	
	private BigInteger r = BigInteger.valueOf(2); // Random-ish
	
	public PDHReceiver( CyclicGroup G, BigInteger password, BigInteger sender_id, BigInteger receiver_id ){
		this.G = G;
		this.password = password;
		this.sender_id = sender_id;
		this.receiver_id = receiver_id;
	}


	private BigInteger x; // Secret value for DH 
	private BigInteger idP; // Hash of ids and password
	
	private BigInteger DHKey; // The key generated from the DH.
	
	@Override
	public void generateValues() {
		hasGeneratedValues = true;
		
		x = BigIntegerUtils.randomBetween( BigInteger.ONE, G.getQ() );
		
		idP = Crypto.hash( sender_id.add(receiver_id).add(password) ).mod(G.getQ());

	}
	
	
	// Return g^x
	public BigInteger getStep2a(){
		checkValues();
		return G.getG().modPow(x, G.getQ());
	}
	
	public BigInteger getStep2b( BigInteger m ) throws TerminateProtocolException{
		
		if( m.equals(BigInteger.ZERO)) throw new TerminateProtocolException("m is equal to 0");
		
		checkValues();
		return Crypto.divide(m, idP.modPow(r, G.getQ()), G.getQ()).modPow(x, G.getQ());
	}

}
