package uk.ac.ncl.burton.twyb.equalityTestingImplementation;

import java.math.BigInteger;
import java.security.SecureRandom;

import uk.ac.ncl.burton.twyb.PK.PKVerifier;
import uk.ac.ncl.burton.twyb.PK.network.NetworkConnectionServer;
import uk.ac.ncl.burton.twyb.crypto.CyclicGroup;

public class PartyServer {

	public static void main(String[] args) {
		
		
		NetworkConnectionServer server = new NetworkConnectionServer();
		Thread serverThread = new Thread(server);
		serverThread.start();

		
		server.setBlockingMode( true );
		
		
		
		// ====== PKS ======
		SecureRandom ran = new SecureRandom();
		
		CyclicGroup G = null;
		BigInteger g = null;
		
		
		BigInteger b = BigInteger.TEN;
		
		
		// === STEP 1 ===
		String init = server.receiveMessage();
		PKVerifier victor = PKVerifier.getInstance(init);
		G = victor.getGroup();
		
		String commitment = server.receiveMessage();
		
		String challenge = victor.getJSONChallenge(commitment);
		server.sendMessage(challenge);
		
		String response = server.receiveMessage();
		String passing = server.receiveMessage();
		
		String outcome = victor.getJSONOutcome(commitment, response, passing);
		server.sendMessage(outcome);
		
		
	}

}
