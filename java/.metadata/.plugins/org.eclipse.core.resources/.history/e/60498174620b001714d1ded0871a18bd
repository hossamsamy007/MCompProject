package uk.ac.ncl.burton.twy.ZPK.network;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.List;

import uk.ac.ncl.burton.twy.ZPK.PKConfig;
import uk.ac.ncl.burton.twy.ZPK.PKProver;
import uk.ac.ncl.burton.twy.ZPK.components.PKComponentType;
import uk.ac.ncl.burton.twy.ZPK.network.NetworkedVerifier.Status;

public class NetworkedProver implements Runnable {

	private PKProver prover;
	
	public NetworkedProver( PKProver prover ){
		this.prover = prover;
	}
	
	public enum Status {
		INPROGRESS,
		FAILED,
		SUCCESS
	}
	private Status status = Status.INPROGRESS;
	public Status getStatus(){
		return status;
	}

	@Override
	public void run() {
		
		try {
			
			System.out.println("[Prover] Connecting to verifier...");
			Socket socket = new Socket("localhost",PKConfig.PROTOCOL_PORT);
			System.out.println("[Prover] Connected");
			
			InputStream in = socket.getInputStream();
			OutputStream out = socket.getOutputStream();
			
			if( runNetworkedProof( in, out) )
				status = Status.SUCCESS;
			else
				status = Status.FAILED;
			
			
			socket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
	}
	
	
	
	public boolean runNetworkedProof( InputStream in, OutputStream out) throws IOException{
		
		// == Check Protocol Version ==
		out.write(PKConfig.PROTOCOL_VERSION);
		// Get response
		int vAccept = in.read();
		if( vAccept != 1 ){
			System.out.println("[Prover] Protocol Version Incorrect");
			in.close();
			out.close();
			return false;
		}
		System.out.println("[Prover] Protocol Version Accepted");
		
		// == Perform component format check with verifier
		// Basically check that both parties have the expected format for PK
		List<PKComponentType> typeList = prover.getComponentTypeList();
		out.write( typeList.size() );
		
		for( int i = 0 ; i < typeList.size(); i++ ){
			out.write( typeList.get(i).ordinal() );
		}
		
		
		
		return true;
	}
	
}
