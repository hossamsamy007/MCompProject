package uk.ac.ncl.burton.twy.ZPK.components.verifier;

import java.math.BigInteger;
import java.util.List;

import uk.ac.ncl.burton.twy.maths.CyclicGroup;

public class PKComponentVerifierBeta extends PKComponentVerifierBasic {

	private PKComponentVerifierAlpha alpha;
	
	PKComponentVerifierBeta(CyclicGroup G,  PKComponentVerifierAlpha alpha) {
		super(G);
		
		this.alpha = alpha;
	}

	@Override
	public boolean verify(BigInteger commitment, BigInteger response, List<BigInteger> passingVariables) {
		// g^s2 . d^s1 == t2.(e)^c
		
		BigInteger g = passingVariables.get(0);
		
		
		//BigInteger u = passingVariables.get(1);
		
		BigInteger gs2 = g.modPow( response, G.getP());
		BigInteger ds1 = g.modPow( s1 , G.getP());
		
		BigInteger tuc = commitment.multiply( u.modPow( this.getChallenge() , G.getP())).mod(G.getP());
		
		return gs.equals(tuc);
		
	}

}
