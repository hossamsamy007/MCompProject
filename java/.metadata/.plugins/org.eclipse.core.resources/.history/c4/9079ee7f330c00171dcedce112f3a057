package uk.ac.ncl.burton.twy.ZPK.components.testing;

import static org.junit.Assert.*;

import java.math.BigInteger;

import org.junit.Test;

import uk.ac.ncl.burton.twy.ZPK.PKProver;
import uk.ac.ncl.burton.twy.ZPK.PKVerifier;
import uk.ac.ncl.burton.twy.ZPK.components.prover.PKComponentProver;
import uk.ac.ncl.burton.twy.ZPK.components.prover.PKComponentProverAlpha;
import uk.ac.ncl.burton.twy.ZPK.components.prover.PKComponentProverBeta;
import uk.ac.ncl.burton.twy.ZPK.components.verifier.PKComponentVerifier;
import uk.ac.ncl.burton.twy.ZPK.components.verifier.PKComponentVerifierAlpha;
import uk.ac.ncl.burton.twy.ZPK.components.verifier.PKComponentVerifierBeta;
import uk.ac.ncl.burton.twy.maths.CyclicGroup;

public class PKNetworkedTesting {

	//@Test
	public static void main(String[] args) {
		
		
		CyclicGroup G = CyclicGroup.generateGroup(512);
		
		BigInteger g = G.getG();
		BigInteger r = BigInteger.TEN;
		
		BigInteger h = G.generateGenerator();
		
		BigInteger x1 = BigInteger.valueOf( 873 );
		BigInteger x2 = BigInteger.valueOf( 2945 );
		BigInteger d = g.modPow(x1, G.getP()).multiply( h.modPow(x2, G.getP()) ).mod(G.getP());
		
		BigInteger a = BigInteger.valueOf(100);
	
		
		PKProver peggy = new PKProver();
		PKVerifier victor = new PKVerifier();
		
		// == Component Setup ==
		PKComponentProver PAlpha1 = new PKComponentProverAlpha( G, g, r);	
		PKComponentProver PAlpha2 = new PKComponentProverAlpha( G, h, r);
		PKComponentProver PBeta = new PKComponentProverBeta( G, (PKComponentProverAlpha) PAlpha1, a, d);
		
		peggy.addPKComponent(PAlpha1);
		peggy.addPKComponent(PAlpha2);
		peggy.addPKComponent(PBeta);
	
		PKComponentVerifier VAlpha1 = new PKComponentVerifierAlpha( G );
		PKComponentVerifier VAlpha2 = new PKComponentVerifierAlpha( G );
		PKComponentVerifier VBeta = new PKComponentVerifierBeta( G, (PKComponentVerifierAlpha) VAlpha1);
		
		victor.addPKComponent(VAlpha1);
		victor.addPKComponent(VAlpha2);
		victor.addPKComponent(VBeta);
		
		
		
		
		
		// == Network Test ==
		
		/*NetworkedProver nPeggy = new NetworkedProver(peggy);
		NetworkedVerifier nVictor = new NetworkedVerifier(victor);
		
		Thread tV = new Thread(nVictor);
		tV.start();
		Thread tP = new Thread(nPeggy);
		tP.start();*/
		
		
		
		System.out.println(peggy.getJSONCommitment());
		BigInteger c = victor.getChallenge();
		System.out.println(peggy.getJSONResponse(c));
		
		
		/*
		// == Commitment ==
		List<BigInteger> commitmentList = peggy.getCommitmentList();
		
		// == Challenge ==
		BigInteger c = victor.getChallenge();
		
		// == Response ==
		List<BigInteger> responseList = peggy.getResponseList(c);
		
		// == Verify ==
		List<List<BigInteger>> passingVariablesList = peggy.getPassingVariablesList();
		
		assertTrue(victor.verify(commitmentList, responseList, passingVariablesList));
		*/
		
		
	}

}
