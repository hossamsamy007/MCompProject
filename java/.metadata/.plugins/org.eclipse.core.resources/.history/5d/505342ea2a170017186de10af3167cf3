package uk.ac.ncl.burton.twy.ZPK2;

import static org.junit.Assert.*;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import uk.ac.ncl.burton.twy.maths.CyclicGroup;
import uk.ac.ncl.burton.twy.utils.BigIntegerUtils;

public class ZPK2Testing {

	@Test
	public void test() {
		
		CyclicGroup G = CyclicGroup.generateGroup(256);
		BigInteger r = BigIntegerUtils.randomBetween( BigInteger.ONE, G.getQ() );
		
		List<BigInteger> bases = new ArrayList<BigInteger>();
		List<BigInteger> exponents = new ArrayList<BigInteger>();
		
		bases.add(G.getG());
		exponents.add(r);
		
		
		PoKProver peggy = PoKProver.generateProver(G, bases, exponents);
		PoKVerifier victor = new PoKVerifier(G);
		System.out.println("Value: " + peggy.getValue());
		
		BigInteger t = peggy.getCommitment();
		System.out.println("Commitment: " + t);
		
		BigInteger c = victor.getChallenge();
		System.out.println("Challenge: " + c);
		
		List<BigInteger> s = peggy.getResponse(c);
		for( int i = 0 ; i < s.size(); i++ ){
			System.out.println("s" + (i+1) + ": " + s.get(i));
		}
		
		System.out.println( bases.get(0).modPow(s.get(0), G.getG()));
		
		
		assertTrue( victor.verify(bases, s, t, peggy.getValue()) );
		
		
		 
		
		
	}

}
