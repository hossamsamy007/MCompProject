package uk.ac.ncl.burton.twy.PSPAKEDH;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import uk.ac.ncl.burton.twy.crypto.Crypto;
import uk.ac.ncl.burton.twy.maths.CyclicGroup;
import uk.ac.ncl.burton.twy.utils.BigIntegerUtils;

public class PDHSender extends PDHParty {

	
	private CyclicGroup G;
	private BigInteger password;
	private BigInteger sender_id;
	private BigInteger receiver_id;
	
	private BigInteger r = BigInteger.valueOf(2); // Random-ish
	
	public PDHSender( CyclicGroup G, BigInteger password, BigInteger sender_id, BigInteger receiver_id ){
		this.G = G;
		this.password = password;
		this.sender_id = sender_id;
		this.receiver_id = receiver_id;
	}
	
	
	private BigInteger x; // Secret value for DH 
	private BigInteger idP; // Hash of ids and password
	
	private BigInteger m; // Step 1 message
	
	@Override
	public void generateValues() {
		hasGeneratedValues = true;
		
		x = BigIntegerUtils.randomBetween( BigInteger.ONE, G.getQ() );
		
		idP = Crypto.hash( sender_id.add(receiver_id).add(password) ).mod(G.getQ());
		m = G.getG().modPow(x, G.getQ()).multiply( idP.modPow(r, G.getQ()) ).mod(G.getQ());
	}
	
	public BigInteger getStep1(){
		checkValues();
		return m;
	}

	
	public BigInteger getStep3( BigInteger B, BigInteger k) throws TerminateProtocolException{
		
		DHKey = B.modPow(x, G.getQ());
		
		List<BigInteger> hashCheckList = new ArrayList<BigInteger>();
		hashCheckList.add(PDHConfig.AUTHENTICATION_SALT_A);
		hashCheckList.add(sender_id);
		hashCheckList.add(receiver_id);
		hashCheckList.add(m);
		hashCheckList.add(B);
		hashCheckList.add(DHKey);
		hashCheckList.add(password);
		BigInteger k_pre = Crypto.multiplyList(hashCheckList);
		
		if( !k.equals( Crypto.hash(k_pre ) ) ) throw new TerminateProtocolException("k invalid");
		
		
		hashCheckList = new ArrayList<BigInteger>();
		hashCheckList.add(PDHConfig.AUTHENTICATION_SALT_B);
		hashCheckList.add(sender_id);
		hashCheckList.add(receiver_id);
		hashCheckList.add(m);
		hashCheckList.add(B);
		hashCheckList.add(DHKey);
		hashCheckList.add(password);
		BigInteger k2_pre = Crypto.multiplyList(hashCheckList);
		
		
		hashCheckList = new ArrayList<BigInteger>();
		hashCheckList.add(PDHConfig.EXCHANGE_SALT);
		hashCheckList.add(sender_id);
		hashCheckList.add(receiver_id);
		hashCheckList.add(m);
		hashCheckList.add(B);
		hashCheckList.add(DHKey);
		hashCheckList.add(password);
		BigInteger k2_pre = Crypto.multiplyList(hashCheckList);
		
		return k2_pre;
	}
}
