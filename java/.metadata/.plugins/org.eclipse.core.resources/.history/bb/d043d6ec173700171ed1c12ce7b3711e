package uk.ac.ncl.burton.twy.equalityTestingImplementation;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import uk.ac.ncl.burton.twy.ZKPoK.PKConfig;
import uk.ac.ncl.burton.twy.ZKPoK.PKProver;
import uk.ac.ncl.burton.twy.ZKPoK.PKVerifier;
import uk.ac.ncl.burton.twy.ZKPoK.components.PKComponentProver;
import uk.ac.ncl.burton.twy.ZKPoK.components.PKRandomnessManager;
import uk.ac.ncl.burton.twy.ZKPoK.utils.BigIntegerUtils;
import uk.ac.ncl.burton.twy.crypto.CyclicGroup;
import uk.ac.ncl.burton.twy.crypto.EEA;
import uk.ac.ncl.burton.twy.crypto.EEAResult;
import uk.ac.ncl.burton.twy.network.NetworkConnectionClient;

public class PartyClient {

	public static void main(String[] args) {
		
		
		NetworkConnectionClient client = new NetworkConnectionClient("localhost", PKConfig.PROTOCOL_PORT);
		Thread clientThread = new Thread(client);
		clientThread.start();
		
		client.setBlockingMode(true);
		
		
		// ====== PKS ======
		System.out.println("Generating Group...");
		//CyclicGroup G = CyclicGroup.generateGroup(512);
		System.out.println("Group Generated");
		
		// Bit length: 2048
		CyclicGroup G = new CyclicGroup("33680600102952208035398759002921405614512347453386877831664502910598801334503563510578692351879162399390086862276169309179556191695479859956859968422612278069691162959494915456905287724443311121368936321971003530362841165822185865521857235717309551867892501108343846889712270350511848896368835826186415615227281018288034485267624286050923304729380930526314479773641544370618373398564819267616859253095458191396968315123130140557166757486130791339808971162623057659998453448493619899823348743987549013735958832383934630931813306565028954801462428341814080635862188603120108165288127113660152805899931368691692095664983"
				,"16840300051476104017699379501460702807256173726693438915832251455299400667251781755289346175939581199695043431138084654589778095847739929978429984211306139034845581479747457728452643862221655560684468160985501765181420582911092932760928617858654775933946250554171923444856135175255924448184417913093207807613640509144017242633812143025461652364690465263157239886820772185309186699282409633808429626547729095698484157561565070278583378743065395669904485581311528829999226724246809949911674371993774506867979416191967315465906653282514477400731214170907040317931094301560054082644063556830076402949965684345846047832491"
				,"6794096134053734336299889675213706055342575295341791600857418647225529839958105331671253734921407477912034588773593633280615627688439372970432707652869023143905757056356525476777653054266415381108663379772572730634544542462807615976865667918817863354031292052591650812691301863538138040971389823048884033428054106038319789581110047968419581127101105989708452181565533471000679691697731163608437935732234992497866200974343200953714083576834604524580138343081871294256925360348999265769057435830329896906913105178758745800749441105313595637637207000358435038304240907232956509939011512597150867526714632631699255549646");
		
		
		BigInteger g = G.getG();
		BigInteger mod = G.getP();
		
		
		BigInteger a = BigInteger.valueOf(8213); // Secret value
		
		long startTime = System.currentTimeMillis();
		
		// === STEP 1 ===
		
		// -- Calculations --
		BigInteger h =  G.generateGenerator();
		BigInteger x1 = RandomZQ(G.getQ());
		BigInteger x2 = RandomZQ(G.getQ());
		BigInteger r =  RandomZQ(G.getQ());
		
		
		long t0 = System.nanoTime();
		BigInteger c =  g.modPow( x1, mod ).multiply( h.modPow( x2, mod) );
		BigInteger u1 = g.modPow(r, mod );
		BigInteger u2 = h.modPow(r, mod );
		BigInteger e =  g.modPow( a, mod ).multiply( c.modPow( r, mod) );
		long t1 = System.nanoTime();
		// -- PoK --
		PKProver peggy = new PKProver(G);
		
		// (1)
		List<BigInteger> bases = new ArrayList<BigInteger>();
		List<BigInteger> exponents = new ArrayList<BigInteger>();
		bases.add(g);
		exponents.add(r);
		PKComponentProver c1X1 = PKComponentProver.generateProver(G, bases, exponents);
		
		// (2)
		bases = new ArrayList<BigInteger>();
		exponents = new ArrayList<BigInteger>();
		bases.add(h);
		exponents.add(r);
		PKComponentProver c1X2 = PKComponentProver.generateProver(G, bases, exponents);
		
		// (3)
		bases = new ArrayList<BigInteger>();
		exponents = new ArrayList<BigInteger>();
		bases.add(g);
		exponents.add(a);
		bases.add(c);
		exponents.add(r);
		PKComponentProver c1X3 = PKComponentProver.generateProver(G, bases, exponents);
		
		// -- Random Exponents --
//		BigInteger c1r1 = c1X1.getRandomExponent(0);
//		c1X2.setRandomExponent(0, c1r1);
//		c1X3.setRandomExponent(1, c1r1);
		
		PKRandomnessManager.transferRandomness(c1X2, 0, c1X1, 0);
		PKRandomnessManager.transferRandomness(c1X3, 1, c1X1, 0);
		
		// -- ADD --
		peggy.addComponent(c1X1);
		peggy.addComponent(c1X2);
		peggy.addComponent(c1X3);
		
		// -- Proof --
		String init = peggy.getJSONInitialise();
		client.sendMessage(init);
		
		String commitment = peggy.getJSONCommitment();
		client.sendMessage(commitment);
		
		String challenge = client.receiveMessage();
		
		String response = peggy.getJSONResponse(challenge);
		client.sendMessage(response);
		
		r = null;
		System.gc();
		
		String passing = peggy.getJSONPassingVariables();
		client.sendMessage(passing);
		
		String outcome = client.receiveMessage();
		System.out.println(outcome);
		
		
		
		
		// === STEP 2 ===
		init = client.receiveMessage();
		PKVerifier victor = PKVerifier.getInstance(init);

		commitment = client.receiveMessage();
		
		challenge = victor.getJSONChallenge(commitment);
		client.sendMessage(challenge);
		
		response = client.receiveMessage();
		passing = client.receiveMessage();
		
		outcome = victor.getJSONOutcome(response, passing);
		client.sendMessage(outcome);
		
		boolean success = victor.isProofSuccessful();
		//System.out.println(success);
		
		
		BigInteger u1d = victor.getValue(0);
		BigInteger u2d = victor.getValue(1);
		BigInteger ed = victor.getValue(2);
		
		// === STEP 3 ===
		
		// -- Calculations --
		BigInteger z = RandomZQ(G.getQ());
		
		
		BigInteger edz = ed.modPow(z, mod);
			BigInteger zx1 = z.multiply(x1);
		BigInteger u1dzx1 = u1d.modPow( zx1 , mod).modInverse(mod);
			BigInteger zx2 = z.multiply(x2);
		BigInteger u2dzx2 = u2d.modPow( zx2 , mod).modInverse(mod);
	
		BigInteger d = edz.multiply(u1dzx1).multiply(u2dzx2).mod(mod);
		
		// GCD PROOF:   PK{(z,q,r1,r2,a,b) : C = g^z h^r1 AND D = g^q h^r2 AND g = C^a D^b
		BigInteger r1 = RandomZQ(G.getQ());
		BigInteger r2 = RandomZQ(G.getQ());
		
		EEAResult eea = EEA.eea(z, G.getQ());
		
		List<BigInteger> baseseea = new ArrayList<BigInteger>();
		List<BigInteger> exponentseea = new ArrayList<BigInteger>();
		baseseea.add(g);
		baseseea.add(h);
		exponentseea.add(z);
		exponentseea.add(r1);
		BigInteger C = BigIntegerUtils.multiplyBaseExponents(mod, baseseea, exponentseea);
		
		baseseea = new ArrayList<BigInteger>();
		exponentseea = new ArrayList<BigInteger>();
		baseseea.add(g);
		baseseea.add(h);
		exponentseea.add(mod);
		exponentseea.add(r2);
		BigInteger D = BigIntegerUtils.multiplyBaseExponents(mod, baseseea, exponentseea);
	
		// -- PoK --
		peggy = new PKProver(G);
		
		// (1)
		bases = new ArrayList<BigInteger>();
		exponents = new ArrayList<BigInteger>();
		bases.add(g);
		exponents.add(x1);
		bases.add(h);
		exponents.add(x2);
		PKComponentProver c3X1 = PKComponentProver .generateProver(G, bases, exponents);
		
		// (2)
		bases = new ArrayList<BigInteger>();
		exponents = new ArrayList<BigInteger>();
		bases.add(ed);
		exponents.add(z);
		bases.add(u1d);
			List<BigInteger> nzx1List = new ArrayList<BigInteger>(); nzx1List.add(BigInteger.valueOf(-1)); nzx1List.add(z); nzx1List.add(x1);
		exponents.add(BigIntegerUtils.multiplyList(nzx1List));
		bases.add(u2d);
			List<BigInteger> nzx2List = new ArrayList<BigInteger>(); nzx2List.add(BigInteger.valueOf(-1)); nzx2List.add(z); nzx2List.add(x2);
		exponents.add(BigIntegerUtils.multiplyList(nzx2List));
		PKComponentProver c3X2 = PKComponentProver .generateProver(G, bases, exponents);
		
		// (3)
		bases = new ArrayList<BigInteger>();
		exponents = new ArrayList<BigInteger>();
		bases.add(g);
		exponents.add(z);
		bases.add(h);
		exponents.add(r1);
		PKComponentProver c3X3 = PKComponentProver.generateProver(G, bases, exponents);
		
		// (4)
		bases = new ArrayList<BigInteger>();
		exponents = new ArrayList<BigInteger>();
		bases.add(g);
		exponents.add(mod);
		bases.add(h);
		exponents.add(r2);
		PKComponentProver c3X4 = PKComponentProver.generateProver(G, bases, exponents);
		
		// (5)
		bases = new ArrayList<BigInteger>();
		exponents = new ArrayList<BigInteger>();
		bases.add(C);
		exponents.add(eea.getS());
		bases.add(D);
		exponents.add(eea.getT());
		PKComponentProver c3X5 = PKComponentProver.generateProver(G, bases, exponents);
		
		// -- Random Exponents --
		PKRandomnessManager.transferRandomness2Multiplyx(c3X2, 1, c3X2, 0 , c3X1, 0 , BigInteger.valueOf(-1));
		PKRandomnessManager.transferRandomness2Multiplyx(c3X2, 2, c3X2, 0 , c3X1, 1 , BigInteger.valueOf(-1));
		
		// -- ADD --
		peggy.addComponent(c3X1);
		peggy.addComponent(c3X2);
		peggy.addComponent(c3X3);
		peggy.addComponent(c3X4);
		peggy.addComponent(c3X5);
		
		// -- Proof --
		init = peggy.getJSONInitialise();
		client.sendMessage(init);
		
		commitment = peggy.getJSONCommitment();
		client.sendMessage(commitment);
		
		challenge = client.receiveMessage();
		
		response = peggy.getJSONResponse(challenge);
		client.sendMessage(response);
		
		x1 = null;
		x2 = null;
		z = null;
		System.gc();
		
		passing = peggy.getJSONPassingVariables();
		client.sendMessage(passing);
		
		outcome = client.receiveMessage();
		System.out.println(outcome);
		
		System.out.println("d: " + d );
		
		long endTime = System.currentTimeMillis();
		
		client.stop();
		
		System.out.println("Data Sent:     " + client.getTotalBytesSent() + " B");
		System.out.println("Data Received: " + client.getTotalBytesReceived() + " B");
		
		System.out.println(client.getTotalBytesSent() + "\t" + client.getTotalBytesReceived() );
		System.out.println(client.getTotalMessagesSent() + "\t" + client.getTotalMessagesReceived() );
		
		System.out.println("Time (ms): " + (endTime-startTime) );
	}
	
	
	private static BigInteger RandomZQ(BigInteger q){
		return BigIntegerUtils.randomBetween(BigInteger.ONE, q);
	}

	
}
